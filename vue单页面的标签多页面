总标签页面：
<template>
  <div class="content">
    <div class="aside">
      <capacity-aside></capacity-aside>
    </div>
    <div class="main">
      <div class="mainDivs">
        <el-tabs v-model="activeName" type="border-card" @tab-click="handleClick">
        # 标签页，组件调用
          <el-tab-pane label="按region统计" name="first">
            <region-capacity ref="childFirst"></region-capacity>
          </el-tab-pane>
          <el-tab-pane label="按az统计" name="second">
            <az-capacity ref="childSecond"></az-capacity>
          </el-tab-pane>
          <el-tab-pane label="按pod统计" name="three">
            <pod-capacity ref="childThree"></pod-capacity>
          </el-tab-pane>
        </el-tabs>
      </div>
    </div>
  </div>
</template>

<script>
import regionCapacity from "../pages/regionCapacity";
import azCapacity from "../pages/azCapacity";
import podCapacity from "../pages/podCapacity";
import capacityAside from "../components/capacityAside";
export default {
  data() {
    return {
      data: [],
      # 初始标签页设置为first
      activeName: "first"
    };
  },
  components: {
    regionCapacity,
    azCapacity,
    podCapacity,
    capacityAside
  },
  methods: {
    # 设置标签页的跳转，bridge()方法实现跳转
    handleClick(tab, event) {
      // console.log(this.$refs.childFirst.bridge)
      if (event.target.id == "tab-first") {
        this.$refs.childFirst.bridge();
      } else if (event.target.id == "tab-second") {
        this.$refs.childSecond.bridge();
      } else {
        this.$refs.childSix.bridge();
      }
    }
  }
}
</script>

<style scoped>
</style>

主标签页面（默认加载标签页面）：
<template>
  <div class="mainDiv">
    <div class="choose-export">
      # 以下click点击事件控制选择下拉框的展示和收起
      <el-button size="medium" plain @click="switchVisible">选择
        <i class="el-icon-arrow-down el-icon--right"></i>
      </el-button>
      <div class="dropdowm" id="dropdown-id" v-if="visible">
        <el-row>
          <el-col :span="24">
            <i class="el-icon-close fr btnClose" @click="switchVisible(false)"></i>
          </el-col>
        </el-row>
        <el-form :inline="true" ref="form" method="post" :form="form">
          <el-row>
            <el-col :span="12">
              <el-form-item label="region">
                <el-select v-model="form.regionName" multiple collapse-tags filterable placeholder="请选择>
                  <el-option v-for="item in regionMsg" :key="item" :label="item" :value="item"></el-option>
                </el-select>
              </el-form-item>
            </el-col>
            ......
            <el-col :span="24">
              <el-button class="fs" @click="searchMsg">搜索</el-button>
            </el-col>
          </el-row>
        </el-form>
      </div>
      <el-button size="medium" plain class="export" @click="exportExcel">导出</el-button>
    </div>
    <div class="tablePadding">
      <el-table :data="data.slice((currentPage-1)*pagesize,currentPage*pagesize)" border stripe :summary-method="getSummaries" show-summary style="width:100%">
        <el-table-column class="test" label="Region" sortable show-overflow-tooltip width="125">
          <template slot-scope="scope">
            <el-button type="text" @click="showDetail(scope.row)">{{scope.row.regionName}}</el-button>
          </template>
        </el-table-column>
        <el-table-column prop="hostNum" label="主机数" sortable show-overflow-tooltip width="120"></el-table-column>
        ......
        <!-- <el-table-column prop="t6" label="查看详情">
            <template slot-scope="scope">
            <el-button type="text" @click="changeDialogStatus()">查看详情</el-button>
            </template>
        </el-table-column>-->
      </el-table>
    </div>
    <div class="block">
      <el-pagination @size-change="handleSizeChange" @current-change="handleCurrentChange" :current-page="currentPage"
        :page-sizes="[10,15,20,50,100]" :page-size="pagesize" layout="total,sizes,prev,pager,next,jumper" :total="data.length"></el-pagination>
    </div>
    # 下钻页面，传入当前行作为参数
    <el-dialog class="detail" :visible.sync="dialogVisible" width="80%" center @close="closeDialog" v-if="dialogVisible">
      <region-detail :currentRegion="currentRegion"></region-detail>
    </el-dialog>
  </div>
</template>

<script>
import * as Export from '../assets/javascripts/export.js' 
import regionDetail from '../components/regionDetail'
export default {
  components: {
    regionDetail
  },
  data() {
    return {
      data: [],
      currentPage: 1,
      pagesize: 20,
      currentRegion:{},
      visible:false,
      dialogVisible:false,
      regionMsg:[],
      form:{
        regionName:'',
      }
    }
  },
  # 页面渲染时默认加载此标签页
  created () {
    this.bridge()
  },
  # 加载随region变化的可用区信息，这里是级联关系
  watch:{
    'form.regionName':function(newValue,oldValue) {
      this.$http
        .post('/capacityManage/azInfo/', {          //可用区url
          form:this.form.regionName
        })
        .then(resp => {
          this.azMsg=resp.data
        })
        .catch(error=> {
          console.log(error)
        })
    },
    deep:true
  },
  methods: {
    getSummaries(param) {
      const { columns, data } = param;
      const sums = [];
      let num = 4;
      columns.forEach((column, index) => {
        if (index === 0) {
          sums[index] = '合计';
          return;
        }
        const values = data.map(item => Number(item[column.property]));
        if (!values.every(value => isNaN(value))) {
          sums[index] = values.reduce((prev, curr) => {
            const value = Number(curr);
            if (!isNaN(value)) {
              return Math.floor((prev + curr)*100)/100;
            } else {
              return prev;
            }
          }, 0);
          // sums[index] += ' ';
        } else {
          sums[index] = ' --';
        }
      });
      sums[num+6] = Math.floor((sums[num+2]/sums[num])*10000)/100 + "%";
      sums[num+7] = Math.floor((sums[num+3]/sums[num+1])*100).toFixed(2) + "%";
      return sums;
    },
    # 控制visible状态
    switchVisible(visible) {
      visible == ''?this.visible = !this.visible:this.visible = visible
    },
    closeDialog() {    
      this.dialogVisible = false
    },
    handleSizeChange(size) {
      this.pagesize=size
    },
    handleCurrentChange(currentPage) {
      this.currentPage=currentPage
    },
    showDetail(currentRegion) {
      this.dialogVisible=true
      this.currentRegion=currentRegion
    },
    bridge() {
      //点击加载数据
      this.loadingMsg();
      this.$http
        .post('/capacityManage/regionCompute/')   //后端url
        .then(resp=>{
          this.data = resp.data
        })
    },
    loadingMsg(){
       # 默认的选择框加载数据
       this.$http
        .get('/capacityManage/regionInfo/')      //region url
        .then(resp=> {
          this.regionMsg = resp.data.regionName
        })
    },
    searchMsg() {
      //点击搜索
      this.visible=false
      this.$http
        .post('/capacityManage/regionCompute/',{                      //后端url
          form:this.form
        })
        .then(resp=> {
          this.data=resp.data
          # 点击搜索后，当前页数需要重置为1，否则会导致，在第二页之后的页面上无法搜索任何数据，均显示无结果
          this.currentPage=1
        })
    },
    exportExcel() {
      //导出Excel，将搜索的参数传入后端
      const querys={
        regionName:this.form.regionName,
      }
      const url ='/capacityManage/regionCompute/download/'          //后端url
      Export.downloadExcel(querys,url)
    },
    // exportDetail(){
    //   const url = 'http://127.0.0.1:8000/xxx'
    //   window.location.href = url
    // }
  }
}
</script>

<style scoped>
</style>

分标签页面：
分标签页和主标签页相比，少了一个created函数加载bridge，加载此页面之前有一个点击动作，而主标签页没有。
其他跟主标签内容可完全相同
