mode=“hash”，在网址后面带上# ；mode=“history”，网址是原网址，不用带任何符号（在router/index.js文件中）
下载路由，npm run vue-router，下载后的文件在module文件里面找
加载模块import VueRouter from 'vue-router'
注册：Vue.use(Router) 
定义路由：
export default new Router({
 //mode:'history',
 routes: [ {
   path: '/',
   name: 'Index',
   component: Index,
   children:[
    {path:'',component:indexHome}, {path:'add',component:addHome}
  ] },
})
使用定义好的路由：
第一种使用方式：
<router-link to='/'>首页</router-link>
<router-link to='/add'>子页面</router-link>
第二种使用方式：
this.$router.push('/')
this.$router.push('/add')

vue-router 默认 hash 模式 —— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。
如果不想要很丑的 hash，我们可以用路由的 history 模式，这种模式充分利用 history.pushState API 来完成 URL 跳转而无须重新加载页面。
当你使用 history 模式时，URL 就像正常的 url，例如 http://yoursite.com/user/id，也好看！
不过这种模式要玩好，还需要后台配置支持。因为我们的应用是个单页客户端应用，如果后台没有正确的配置，当用户在浏览器直接访问 http://oursite.com/user/id 
就会返回 404，这就不好看了。
所以呢，你要在服务端增加一个覆盖所有情况的候选资源：如果 URL 匹配不到任何静态资源，则应该返回同一个 index.html 页面，这个页面就是你 app 依赖的页面。
建议：后台在没有配置的情况下，不建议开启history 模式，否则项目编译过后的页面打开空白，本地运行正常。
