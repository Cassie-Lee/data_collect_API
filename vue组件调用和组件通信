组件调用
有的时候，一个页面需要调用另一个页面，比如：为每一个页面添加一个共同的纵向导航栏
operationCluster.vue

<template>
  <div class="content">
    <div class="aside">
      # 导入纵向导航栏，组件调用，调用的是operationCluster组件，调用的时候写作短横线连接的形式
      <operation-aside></operation-aside>
    </div>
    <div class="main">
      <div class="baseDiv">
      <div class="choose-export">
      # 选择和导出框，处于同一水平线上，选择框是点击下拉的模式
      <el-button size="medium" plain @click="visible=!visible">
        选择<i class="el-icon-arrow-down el-icon--right"></i>
      </el-button>
      <div class="dropdowm" id="dropdown-id" v-if="visible">
      # 下拉选择框，未点击选择框时，选项内容不可见，点击后选择下拉框可见
        <el-row>
        # 关闭下拉框的叉叉
          <el-col :span="24">
            <i class="el-icon-close fr btnClose" @click="visible=false"></i>
          </el-col>
        </el-row>
        <el-form :inline="true" ref="form" method="post" :form="form">
        # 下拉框选项
            <el-row>
              <el-col :span="12">
                <el-form-item label="区域">
                # 选择框
                  <el-select v-model="form.regionName" multiple collapse-tags filterable placeholder="请选择">
                    <el-option v-for="item in regionMsg" :key="item" :label="item" :value="item">
                    </el-option>
                  </el-select>
                </el-form-item>
              </el-col>
              <el-col :span="12">
                <el-form-item label="可用区">
                  <el-select v-model="form.azName" multiple  collapse-tags filterable placeholder="请选择">
                    <el-option v-for="item in azMsg" :key="item" :label="item" :value="item">
                    </el-option>
                  </el-select>
                </el-form-item>
              </el-col>
              <el-col :span="12">
                <el-form-item label="集群">
                # 输入框
                  <el-input v-model="form.clusterName" placeholder="可输入多个搜索,隔开"></el-input>
                </el-form-item>
              </el-col>
              ......
              <el-col :span="24">
              # 搜素框，点击搜索，启动搜索
                <el-button class="fs" @click="searchMsg">搜索</el-button>
              </el-col>
            </el-row>
        </el-form>
      </div>
      # 导出框
      <el-button size="medium" plain class="export" @click="exportExcel">导出</el-button>
    </div>
      <div class="tablePadding">
      # 表格展示，data中存储全部数据，采用分页的形式展示
        <el-table :data="data.slice((currentPage-1)*pagesize,currentPage*pagesize)" border show-overflow-tooltip stripe style="width:100%">
          <el-table-column prop="clusterName" label="集群" sortable show-overflow-tooltip width="230"></el-table-column>
          <el-table-column prop="clusterAttribute" label="集群属性" sortable show-overflow-tooltip width="105"></el-table-column>
          ......
          <el-table-column prop="hypervisorNum" label="hypervisor数" sortable show-overflow-tooltip width="135">
          # 下钻功能，scope.row表示传入当前行
          <template slot-scope="scope">
            <el-button type="text" @click="showHypervisorDetail(scope.row)">{{scope.row.hypervisorNum}}</el-button>
          </template>
          </el-table-column>
          <el-table-column prop="vmNum" label="vm数" sortable show-overflow-tooltip>
          <template slot-scope="scope">
            <el-button type="text" @click="showVmDetail(scope.row)">{{scope.row.vmNum}}</el-button>
          </template>
          </el-table-column>
        </el-table>
      </div>
      <div class="block">
      # 分页功能，控制翻页
        <el-pagination @size-change="handleSizeChange" @current-change="handleCurrentChange" :current-page="currentPage" :page-sizes="[10,15,20,50,100]" :page-size="pagesize" layout="total,sizes,prev,pager,next,jumper" :total="data.length">
        </el-pagination>       
      </div>
     </div>
     # 弹出对话框，对应下钻
     <el-dialog :title="hypervisorTop" :visible.sync="hypervisorVisible" @close="closeDialog" v-if="hypervisorVisible" width="80%" center>
       <hypervisor-detail :currentCluster="currentCluster"></hypervisor-detail>
     </el-dialog>
     <el-dialog :title="vmTop" :visible.sync="vmVisible" @close="closeDialog" v-if="vmVisible" width="80%" center>
     # 传入currentcluster，即当前行，传入的是整个当前行的对象
       <vm-detail :currentCluster="currentCluster"></vm-detail>
     </el-dialog>
    </div>
  </div>
</template>

<script>
import operationAside from '../components/operationAside';
import hypervisorDetail from '../components/hypervisorDetail';
import vmDetail from '../components/vmDetail';
导入js函数，调用其中的方法
import * as Export from '../assets/javascripts/export.js';
export default {
  data() {
    return {
    #加载到的全部数据存储在data里
      data: [],
      currentPage: 1,
      pagesize: 20,
      visible: false,
      hypervisorVisible:false,
      vmVisible:false,
      hypervisorTop:"主机详情",
      vmTop:"虚拟机详情",
      # 放在两个选择框展示的数据存储在以下两个列表里
      regionMsg:[],
      azMsg:[],
      # 定义当前行的cluster对象
      currentCluster:{},
      输入到选择框的数据，实现双向绑定（v-model），以便传入后端
      form:{
        regionName:'',
        azName:'',
        clusterName:''
      }
    }
  },
  components: {
    operationAside,
    hypervisorDetail,
    vmDetail
  },
  watch:{
     # 选择region后触发可用区级联
     # 检查region是否有变化，若变化就触发此函数，执行以下动作
    'form.regionName':function(newValue,oldValue) {
      this.$http
        # 带参数访问url，一般用post，不带参数可用get
        .post('/operationPortal/azInfo/', {          //可用区url
          # 后端接收regionName参数，前端从此传入，访问url，传回根据region返回的可用区数据
          form:this.form.regionName
        })
        .then(resp => {
          # 存储返回的数据
          this.azMsg=resp.data
        })
        .catch(error=> {
          console.log(error)
        })
    },
    deep:true
  },
  methods:{
    # 传回当前访问的单页数据量
    handleSizeChange(size) {
      this.pagesize=size
    },
    # 传回当前访问的页数
    handleCurrentChange(currentPage) {
      this.currentPage=currentPage
    },
    # 点击下钻，触发此事件，使弹出对话框可见，且传入当前行的cluster对象
    showHypervisorDetail(currentCluster) {
      this.hypervisorVisible = true,
      this.currentCluster = currentCluster
    },
    showVmDetail(currentCluster) {
      this.vmVisible = true,
      this.currentCluster = currentCluster
    },
    # 给对话框绑定关闭对话框事件，使状态更改为不可见
    closeDialog() {    
      this.hypervisorVisible = false,
      this.vmVisible = false
    },
    # 点击搜索，使选择下拉框状态设置为不可见，传入双向绑定的选项数据，这里传入整个对象，存储返回的数据，并将当前页数初始化为第一页
    searchMsg() {
      //点击搜索
      this.visible=false
      this.$http
        .post('/operationPortal/operationCluster/',{                      //后端url
          form:this.form
        })
        .then(resp=> {
          this.data=resp.data
          this.currentPage=1
        })
    },
    # 导出数据，传入选择项，调用js方法进行导出，此方法在导出button上点击触发
    exportExcel() {
      //导出Excel
      const querys={
        regionName:this.form.regionName,
        azName:this.form.azName,
        clusterName:this.form.clusterName    
      }
      const url ='/operationPortal/operationCluster/download/'          //后端url
      Export.downloadExcel(querys,url)
    },
    # 默认加载数据，即访问当前页面的时候默认加载的数据，一般是全部数据，这里跟搜索用的是同一个url，后端对选择项为0和不为0的情况进行讨论
    # 这里默认加载了要给选择下拉框的数据，一般默认在初始加载页面时加载
    loadingMsg() {
      //默认加载数据
      this.$http
        .post('/operationPortal/operationCluster/')   //后端url
        .then(resp=>{
          this.data = resp.data
        })
      this.$http
        .get('/operationPortal/regionInfo/')      //region url
        .then(resp=> {
          this.regionMsg = resp.data.regionName
        })
    }
  },
  created()和mounted()用于在加载页面时的初始加载，一般用于加载需要提前加载的数据
  mounted() {
    //页面加载后执行函数
    this.loadingMsg()
  }
}
</script>

<style scoped>
.content {
  width:100%;
  height:100vh;
  background-size:100%;
}
.aside {
  width:165px;
  height:100%;
  float:left;
  background:#191c2b;
}
.main {
  height:100%;
  background-color: #F2F2F2;
  overflow:auto;
  position:absolute;
  top:60px;
  bottom:0;
  right:0;
  left:165px;
}
.baseDiv,.mainDivs {
  margin:20px;
}
.choose-export {
  margin-bottom:15px;
}
#dropdown-id {
  position: absolute;
  left:20px;
  top:70px;
  width:610px;
  padding: 10px 20px 20px 0px;
  background:#fff;
  border:1px solid #ebeef5;
  box-shadow:0 2px 12px 0 rgba(0,0,0,0.1);
  border-radius:4px;
  z-index:999;
  padding-top:15px;
}
.fr,.fs {
  float:right;
  margin-right:10px;
}
.fr {
  margin-bottom:10px;
}
.export,.el-form-item  {
  float:right;
}
</style>

组件通信：
vmDetail.vue

<template>
  <div class="flavor-detail">
      <el-table 
        :data="data.slice((currentPage-1)*pagesize,currentPage*pagesize)"
        show-overflow-tooltip
        border
        stripe
        style="width:100%">
        <el-table-column prop="hypervisorName" label="所在主机" show-overflow-tooltip width="300"></el-table-column>
        <el-table-column prop="clusterName" label="所在集群" show-overflow-tooltip></el-table-column>
      </el-table>
    <div class="block">
        <el-pagination @size-change="handleSizeChange" @current-change="handleCurrentChange" :current-page="currentPage" :page-sizes="[10,15,50]" :page-size="Number(pagesize)" layout="total,sizes,prev,pager,next,jumper" :total="data.length">
        </el-pagination>
    </div>
  </div>
</template>

<script>
export default {
  data() {
    return {
      data: [],
      currentPage: 1,
      pagesize:10,
    };
  },
  # 组件通信，使用props接受从父组件传递过来的clutser对象
  props: {
    currentCluster: {}
  },
  mounted() {
    this.loadingMsg();
  },
  methods: {
    handleSizeChange(size) {
        this.pagesize=size
    },
    handleCurrentChange(currentPage) {
        this.currentPage=currentPage
    },
    loadingMsg() {
        //這里加入后端对应的URL
      this.$http
        .post("/operationPortal/operationCluster/vm/", {
          # 使用从父组件传过来的cluster对象中的clutserName和podName，作为参数传递给后端
          clusterName: this.currentCluster.clusterName
          podName: this.currentCluster.podName
        })
        .then(resp => {
            # 存储返回的数据
            this.data = resp.data
        })
        .catch(err => {
          console.log(err);
        });
    }
  }
};
</script>

<style scoped>
</style>

