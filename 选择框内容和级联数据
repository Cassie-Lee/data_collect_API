def getOperationSearchInfo(request):
    region = getRegionInfo()
    avalibleZone = getAvalibleZoneInfo()
    pod = getPodInfo()
    cluster = getClusterInfo()
    flavor = getFlavorInfo()
    attribute = getClusterAttribute()

    # 将查询到的数据存储在字典中
    data = {'regionName':region,'avalibleZone':avalibleZone,'pod':pod,'cluster':cluster,
            'flavor':flavor,'attribute':attribute}
            
    return JsonResponse(data, safe=False)
    
def getRegionInfo():
    regionNameList = []
    cursor = connections['default'].cursor()
    try:
        # distinct 是一种去重算法
        querySql = "SELECT distinct name from t_region;"
        cursor.execute(querySql)
    # 捕捉mysql类错误
    except pymysql.err as e:
        try:
            logging.error("Error %d:%s" % (e.args[0], e.args[1]))
        except IndexError:
            logging.error("MySQL Error:%s" % str(e))

    regionRets = cursor.fetchall()
    if len(regionRets) == 0:
        logging.error("[ERR]query regionName error.")
        return None

    for regionRet in regionRets:
        regionName = regionRet[0]
        regionNameList.append(regionName)

    cursor.close()
    return regionNameList

def getAvalibleZoneInfo():
    avalibleZoneList = []
    cursor = connections['default'].cursor()
    try:
        # 获取不重复的名称，并按名称排序
        querySql = "select DISTINCT name from t_az order by name;"
        cursor.execute(querySql)
    except pymysql.err as e:
        try:
            logging.error("Error %d:%s" % (e.args[0], e.args[1]))
        except IndexError:
            logging.error("MySQL Error:%s" % str(e))

    regionRets = cursor.fetchall()
    if len(regionRets) == 0:
        logging.error("[ERR]query avalibleZone error.")
        return None

    for regionRet in regionRets:
        regionName = regionRet[0]
        avalibleZoneList.append(regionName)

    cursor.close()
    return avalibleZoneList
    
def getClusterAttribute():
    dataList = []
    cursor = connections['default'].cursor()
    try:
        querySql = "select DISTINCT attribute from t_cluster where attribute = 'common' or t_cluster.attribute = 'dec' or t_cluster.attribute = 'deh';"
        cursor.execute(querySql)
    except pymysql.err as e:
        try:
            logging.error("Error %d:%s" % (e.args[0], e.args[1]))
        except IndexError:
            logging.error("MySQL Error:%s" % str(e))

    rets = cursor.fetchall()
    if len(rets) == 0:
        logging.error("[ERR]query cluster error.")
        return None

    for ret in rets:
        clusterAttribte = ret[0]
        dataList.append(clusterAttribte)

    cursor.close()
    return dataList
    
级联：
前端：
watch:{
    'form.regionName':function(newValue,oldValue) {
      this.$http
        .post('/capacityManage/azInfo/', {          //可用区url
          form:this.form.regionName
        })
        .then(resp => {
          this.azMsg=resp.data
        })
        .catch(error=> {
          console.log(error)
        })
    },
    deep:true
  },

def getAvalibleZoneByRegion(request):
    regionList = eval(request.body)['form']
    data = searchAvalibleZoneByRegion(regionList)

    return JsonResponse(data,safe=False)
    
def searchAvalibleZoneByRegion(regionList):
    avalibleZoneList = []
    cursor = connections['default'].cursor()

    length = len(regionList)
    if length > 0:
        conditionStr = ''
        i = 0
        for i in range(0,length - 1):
            region = regionList[i]
            conditionStr += region+"' or t_region.name = '"

        i = length - 1
        region = regionList[i]
        conditionStr += region

    try:
        # 如果region没空，则加载全部级联数据
        if length == 0:
            querySql = "select t_az.name " +\
                       "from t_az left join t_region on t_az.t_region_id = t_region.id;"
        # 如果region不为空，则根据选中的region，查询对应的级联数据
        else:
            querySql = "select t_az.name " +\
                       "from t_az left join t_region on t_az.t_region_id = t_region.id " \
                       "where t_region.name='"+conditionStr+"';"
        cursor.execute(querySql)
    except pymysql.err as e:
            try:
                logging.error("Error %d:%s" % (e.args[0], e.args[1]))
            except IndexError:
                logging.error("MySQL Error:%s" % str(e))

    rets = cursor.fetchall()
    if len(rets) == 0:
        logging.error("[ERR]query avalibleZone error.")
        return None

    for ret in rets:
        avalibleZoneList.append(ret[0])

    cursor.close()
    return list(set(avalibleZoneList))
