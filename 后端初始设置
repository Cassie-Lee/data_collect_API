环境：python3.6.6
创建app：
创建app之后，在主app的settings.py中把新增的app添加到INSTALLED_APPS中
在主app的urls.py文件中，加入所创建的appurl，一般设置如下：
from django.contrib import admin
# 这个函数在不同的python版本中略有不同
from django.urls import path, include
from django.views.generic.base import TemplateView

# 数据库配置（settings.py）
DATABASES = {
     'default': {
         'ENGINE': 'django.db.backends.mysql',
         'NAME': 'dedicatedbasedata',
         'USER': 'appro_DeC',
         'PASSWORD': 'Kc<:c~48K/^.AWLq',
         'HOST': 'DeC-3306-mydb-ser.service.consul',
         'PORT': '3306',
    },
}

# memchache缓存配置（settings.py）

需要先安装缓存模块
如果事先配置好pip源，直接pip安装即可，如果没有配置pip源，也可以直接下载安装
安装后需要启动，cmd定位到memcahced.exe所在文件夹，执行：memcached.exe -d -I 20m，即可启动memcahce缓存
或者无需定位，直接执行 ...\memcached-amd64>memcached.exe -d -I 20m ，前面是memcached.exe的路径
这里，-d表示以守护进程启动，如果不加-d，关闭cmd窗口，memchache缓存的启动也会被关闭；加了-d，启动的cmd窗口关闭与否都不会影响memcahce缓存的运行
20m表示单条缓存尺寸，一般默认为1m，当存储的数据很大时，可以根据需要调大这个尺寸，最大是128m。但尺寸太大，性能也会降低。

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': '127.0.0.1:11211',
        'TIMEOUT': 60*10,
        'OPTIONS': {
            # 'MAX_ENTRIES': 300,
            # 'CULL_FREQUENCY': 3,
            'server_max_value_length': 1024 * 1024 * 20,
        }
    }
}

60*10表示缓存超时时间，这里是10分钟，即十分钟缓存失效，这里要看数据的变动是否频繁
1024 * 1024 * 20对应上面的单条缓存尺寸，可以根据需要调整

urlpatterns = [
    path('admin/', admin.site.urls),
    # 创建模板试图，整合前后端
    path('', TemplateView.as_view(template_name="index.html")),
    # 新增的app在这里添加
    path('operationPortal/', include('operationPortal.urls')),
    path('exclusiveCloud/',include('exclusiveCloud.urls')),
  
单个app初始设置：

apps.py
from django.apps import AppConfig
class OperationportalConfig(AppConfig):
    name = 'operationPortal'

urls.py

from django.urls import path
from operationPortal import views
from operationPortal import viewsDrilldown

urlpatterns = [
    path('operationCluster/', views.loadClusterInfo, name='loadClusterData'),
    path('operationCluster/download/', views.downloadClusterInfo, name='downloadClusterInfo'),
    path('operationCluster/hypervisor/', viewsDrilldown.getHypervisorByCluster, name='getHypervisorInfo'),
    path('operationCluster/vm/', viewsDrilldown.getVmByCluster, name='getVmInfoInCluster'),

    path('operationHypervisor/', views.loadHostData, name='loadHostData'),
    path('operationHypervisor/download/', views.downloadHostData, name='downloadHostData'),
]

views.py
对应urls.py的各种函数，如views.loadClusterInfo对应views.py里的loadClusterInfo()函数

前端调用url时，一般写作'/基础url/url/',，基础url在主app中，如：'operationPortal/operationCluster'
